@using Microsoft.AspNetCore.Identity
@inject SignInManager<IdentityUser> signInManager
@inject UserManager<IdentityUser> userManager
@model Abyssal_Events.Models.ViewModel.EventDetailsViewModel

@{
	ViewData["Title"] = Model.Title;
}

<div class="container my-5">
	<div class="row justify-content-center">
		<div class="col-12 col-lg-6">
			@if(Model is not null)
			{
				<h1 class="mb-3">@Model.Title</h1>
				<div class="d-flex justify-content-between">
					<p class="text-secondary">@Model.Organizer</p>
					<p class="text-secondary"><i class="bi bi-calendar"></i> @Model.Date.ToShortDateString()</p>
				</div>
				<div class="d-flex justify-content-between">
					<div class="mb-3">
						@if (signInManager.IsSignedIn(User))
						{
							if (Model.IsLiked)
							{
								<a id="likeButton" style="cursor:pointer"><i class="bi bi-heart-fill" style="color:#F9595F"></i></a>
							}
							else
							{
								<a id="likeButton" style="cursor:pointer"><i class="bi bi-heart" style="color:#F9595F"></i></a>
							}
						}
						<span id="totalLikes">@Model.TotalLikes</span> likes
					</div>
					<p class="text-secondary"><i class="bi bi-geo-alt-fill"></i> @Model.Place</p>
				</div>

				<div class="mt-3 mb-3 d-flex">
					<span class="badge bg-secondary">@Model.Category.Name</span>
				</div>
				<img src="@Model.FeaturedImage" class="d-block img-fluid mb-3" />
				<div class="mb-3 event-details-content">
					@Html.Raw(Model.Content)
				</div>
			}
			else
			{
				<p>Event not found</p>
			}
		</div>
	</div>
</div>

@section Scripts{
	<script>
		const likeButtonElement = document.getElementById('likeButton');
		const totalLikesElement = document.getElementById('totalLikes');

		async function GetTotalLikes() {
			const res = await fetch('/api/like/@Model.Id/totalLikes', {
				method: 'GET',
				headers: {
					'Content-Type':'application/json',
					'Accept':'*/*'
				}
			});
			const resData = await res.json();
			totalLikesElement.innerHTML = resData;
		}

		async function RemoveLike() {
			const res = await fetch('/api/like/remove', {
				method: 'POST',
				headers: {
					'Content-Type': 'application/json',
					'Accept': '*/*'
				},
				body: JSON.stringify({
					eventPostId: '@Model.Id',
					userId: '@userManager.GetUserId(User)'
				})
			});
			console.log('remove');
			likeButtonElement.innerHTML = '<i class="bi bi-heart" style="color:#F9595F"></i>';
			likeButtonElement.removeEventListener('click', RemoveLike);
			likeButtonElement.addEventListener('click', AddLike);
			GetTotalLikes();
		};


		async function AddLike() {
			const res = await fetch('/api/like/add', {
				method: 'POST',
				headers: {
					'Content-Type': 'application/json',
					'Accept': '*/*'
				},
				body: JSON.stringify({
					eventPostId: '@Model.Id',
					userId: '@userManager.GetUserId(User)'
				})
			});
			console.log('add');
			likeButtonElement.innerHTML = '<i class="bi bi-heart-fill" style="color:#F9595F"></i>';
			likeButtonElement.removeEventListener('click', AddLike);
			likeButtonElement.addEventListener('click', RemoveLike);
			GetTotalLikes();
		};

		const True = true;
		const False = false;

		if (@Model.IsLiked == true) {
			likeButtonElement.addEventListener('click', RemoveLike);
			likeButtonElement.removeEventListener('click', AddLike);
		} else {
			likeButtonElement.removeEventListener('click', RemoveLike);
			likeButtonElement.addEventListener('click', AddLike);
		}
	</script>
}